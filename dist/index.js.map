{"version":3,"file":"index.js","sources":["../src/hooks/useBlockCountdown/index.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\ninterface TimeObject {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n/**\n * Average block time in seconds\n */\nconst BlockTimes: Record<string, number> = {\n  \"bitcoin\": 600000,\n  \"ethereum\": 15000,\n  \"goerli\": 15000,\n  \"polygon\": 2000,\n  \"mumbai\": 5000,\n  \"bsc\": 3000,\n  \"bsc-testnet\": 3000,\n  \"cardano\": 20000,\n  \"cardano-testnet\": 20000,\n  \"solana\": 8000,\n  \"dogecoin\": 60000,\n  \"fantom\": 1000,\n  \"harmony\": 8000,\n  \"avalanche\": 5000,\n  \"avalanche-testnet\": 5000,\n  \"arbitrum\": 5000,\n  \"arbitrum-testnet\": 5000,\n  \"optimism\": 15000,\n  \"optimism-testnet\": 15000,\n  // add more blockchain networks and their average block times as needed\n}\n\n/**\n * Usage\n * const { days, hours, minutes, seconds } = useBlockCountdown(100, \"bitcoin\")\n * \n * @param blocks \n * @param network \n * @returns { days, hours, minutes, seconds }: TimeObject\n */\nexport const useBlockCountdown = (blocks: number, network: string): TimeObject => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(0);\n\n  function tick(timespan: number) {\n    const currentTime = Date.now();\n    const timeLeft = Math.max(0, timespan - currentTime);\n    setTimeRemaining(timeLeft);\n  }\n\n  useEffect(() => {\n    const BLOCK_TIME = BlockTimes[network]; // TODO - Find a free api and get current average block time for the chain\n    const timespan = blocks * BLOCK_TIME + Date.now();\n    tick(timespan);\n    const intervalId = setInterval(() => {\n      tick(timespan);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [blocks]);\n\n  const formatTime = (time: number): TimeObject => {\n    const seconds = Math.floor(time / 1000) % 60;\n    const minutes = Math.floor(time / 60000) % 60;\n    const hours = Math.floor(time / 3600000) % 24;\n    const days = Math.floor(time / 86400000);\n    return { days, hours, minutes, seconds };\n  };\n\n  return formatTime(timeRemaining);\n};\n"],"names":["BlockTimes","bitcoin","ethereum","goerli","polygon","mumbai","bsc","bsc-testnet","cardano","cardano-testnet","solana","dogecoin","fantom","harmony","avalanche","avalanche-testnet","arbitrum","arbitrum-testnet","optimism","optimism-testnet","useBlockCountdown","blocks","network","_a","useState","timeRemaining","setTimeRemaining","tick","timespan","currentTime","Date","now","timeLeft","Math","max","useEffect","BLOCK_TIME","intervalId","setInterval","clearInterval","minutes","hours","time","seconds","floor","days"],"mappings":"4QAYMA,WAAqC,CACzCC,QAAW,IACXC,SAAY,KACZC,OAAU,KACVC,QAAW,IACXC,OAAU,IACVC,IAAO,IACPC,cAAe,IACfC,QAAW,IACXC,kBAAmB,IACnBC,OAAU,IACVC,SAAY,IACZC,OAAU,IACVC,QAAW,IACXC,UAAa,IACbC,oBAAqB,IACrBC,SAAY,IACZC,mBAAoB,IACpBC,SAAY,KACZC,mBAAoB,MAYTC,kBAAoB,SAACC,EAAgBC,GAC1C,IAAAC,EAAoCC,eAAiB,CAAC,EAArDC,OAAeC,OAEtB,SAASC,EAAKC,GACZ,IAAMC,EAAcC,KAAKC,MACnBC,EAAWC,KAAKC,IAAI,EAAGN,EAAWC,CAAW,EACnDH,EAAiBM,CAAQ,EAG3BG,gBAAU,WACR,IAAMC,EAAapC,WAAWsB,GACxBM,EAAWP,EAASe,EAAaN,KAAKC,MAEtCM,GADNV,EAAKC,CAAQ,EACMU,YAAY,WAC7BX,EAAKC,CAAQ,GACZ,GAAI,GAEP,OAAO,WAAM,OAAAW,cAAcF,CAAU,IACpC,CAAChB,EAAO,EAEX,IAEQmB,EACAC,EAKR,OARoBC,EAQFjB,EAPVkB,EAAUV,KAAKW,MAAMF,EAAO,GAAI,EAAI,GACpCF,EAAUP,KAAKW,MAAMF,EAAO,GAAK,EAAI,GACrCD,EAAQR,KAAKW,MAAMF,EAAO,IAAO,EAAI,GAEpC,CAAEG,KADIZ,KAAKW,MAAMF,EAAO,KAAQ,EACxBD,QAAOD,UAASG,UAInC"}